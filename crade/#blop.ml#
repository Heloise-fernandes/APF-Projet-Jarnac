(*================Pioche================*)
type piocheJeu = char list

let laPiocheDebut = [(14,'a');(4,'b');(7,'c');(5,'d');(19,'e');(2,'f');(4,'g');(2,'h');(11,'i');(1,'j');(1,'k');(6,'l');(5,'m');(9,'n');(8,'o');(4,'p');(1,'q');(10,'r');(7,'s');(9,'t');
(8,'u');(2,'v');(1,'w');(1,'x');(1,'y');(2,'z')]
      
let rec creerPioche l = 
	let rec sousListe a x = if x = 0 then [] else a::(sousListe a (x-1))in
	match l with
	|[]->[]
	|x::q -> let (num , lettre) = x in (sousListe lettre num)@(creerPioche q)
	
	
let getElmtRandom p i =
	let rec enleverElmt l1 e = match l1 with
	|[]-> failwith "Cet element n'existe pas"
	|x::q -> if x = e then q else x::(enleverElmt q e)
	in let elmt = List.nth p i in (elmt , enleverElmt p elmt)  

let rec melanger p =
	match p with 
	|[]-> []
	|_ ->let b = Random.self_init in  let (x,q) =  getElmtRandom p (Random.int (List.length p) ) in x::(melanger q)

let rec piocher p i = match p with
	|[]->([],[])
	|x::q -> if i=0 then ([],x::q) else let (listej, restep) = piocher q (i-1) in (x::listej,restep)

let faireEchange a b c p= piocher (melanger (a::b::c::p)) 3

(*(*TEST*)
let maPioche1 =  creerPioche laPiocheDebut
let maPioche2 =  melanger maPioche1

let (lettreDispo,maPioche3) = piocher maPioche2 6
let taille = List.length maPioche3

let (nvmain,maPioche4) = faireEchange 'e' 'e' 'c' maPioche3
let taille = List.length maPioche4
*)

(*================Initialisation du jeu================*)
type plateaujoueur = {grille : char array array; numLigne : int; fini : bool;}
type joueur = {nom : string; plateau : plateaujoueur; score : int; lettre : char list;}
type partie = {pioche : piocheJeu; tour : int; joueur1 : joueur; joueur2 : joueur;}

let nouveauPlateau = {grille = Array.make_matrix 8 9 '-';numLigne = 0;fini = false;}

let ajouterUnJoueur n = {nom = n;plateau = nouveauPlateau;score=0;lettre = []}

(*v2*)
(*let ajouterUnJoueur = {nom = read_Line ();plateau = nouveauPlateau;score=0;lettre = []}*)

(*V2*)
(*let nouvellePartie = 
begin
	print_string "Entrer le nom du premier joueur";
	let j1 = ajouterUnJoueur in print_string "Entrer le nom du deuxième joueur";
	let j2 = ajouterUnJoueur in 
	{pioche = nouvellePioche; 
	tour = 0; 
	joueur1 = j1; joueur2 = j2}
end*)

let nouvellePartie = 
begin
	print_string "Entrer le nom du premier joueur"; print_newline ();
	let n1 = read_line () in print_string "Entrer le nom du deuxième joueur"; print_newline ();
	let n2 = read_line () in 
	{
	pioche = melanger (creerPioche laPiocheDebut);
	tour = 0; 
	joueur1 = ajouterUnJoueur n1; joueur2 = ajouterUnJoueur n2;}
end

(*================Tour de jeu===============*)
let estDansDictionnaire m = true

let rec string2List s i = if i = (String.length s) then []
			else s.[i]::(string2List s (i+1));;
 
let rec peutCreerUnMot liste mot =
let rec parcourmot m l i = 
			let rec estdansListe lettre l = match l with
			|[]->([],false)
			|x::q-> if x = lettre then (q,true) else let (r,b) = estdansListe lettre q in (x::r,b)
			in
			if i = (String.length m) then true
			else let (q,b) = (estdansListe m.[i] l) in b && parcourmot m q (i+1)
in
parcourmot mot liste 0

let rec enleverLettre l lettre =
match l with
|[]->[]
|x::q-> if x==lettre then q else let r = enleverLettre q lettre in x::r

let rec enleverMot liste mot i = if i = (String.length mot) then liste
			else let l = enleverLettre liste mot.[i] in enleverMot l lot (i+1)

(*le mot existe et n'est pas trop long*)
let ajouterUnMot j m = 
let rec ajouterMot tab mot i = if i = (String.length mot) then ()
							else let t = tab.(i)<-mot.[i] in ajouterMot tab mot (i+1)
in let j.lettre = enleverMot l m 0 in  ajouterMot j.plateau.(j.plateau.numLigne) m 0

let changerMot j ligne m = 
let rec getLettre t i = if (i = Array.length t)||(t.(i) = '-') then []
					else t.(i)::(getLettre t (i+1))
in let j.lettre = j.lettre@(getLette j.plateau.(i) 0) in ajouterUnMot j m
